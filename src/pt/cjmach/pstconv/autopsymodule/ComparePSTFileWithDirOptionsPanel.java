/*
 *  Copyright 2022 Carlos Machado
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package pt.cjmach.pstconv.autopsymodule;

import java.io.File;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.casemodule.Case;

/**
 *
 * @author cmachado
 */
public class ComparePSTFileWithDirOptionsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExportPSTOptionsPanel
     */
    public ComparePSTFileWithDirOptionsPanel() {
        initComponents();
    }

    /**
     * 
     * @return 
     */
    public String getEncoding() {
        return (String) comboBoxEncoding.getSelectedItem();
    }

    /**
     * 
     * @return 
     */
    public String getOutputDirectory() {
        return textFieldInputDir.getText();
    }

    /**
     * 
     * @return 
     */
    public String getOutputFormat() {
        return (String) comboBoxFormat.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelExportToDir = new javax.swing.JLabel();
        textFieldInputDir = new javax.swing.JTextField();
        buttonBrowseDir = new javax.swing.JButton();
        labelOutputFormat = new javax.swing.JLabel();
        comboBoxFormat = new javax.swing.JComboBox<>();
        labelEncoding = new javax.swing.JLabel();
        comboBoxEncoding = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(480, 80));

        labelExportToDir.setLabelFor(textFieldInputDir);
        org.openide.awt.Mnemonics.setLocalizedText(labelExportToDir, org.openide.util.NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ComparePSTFileWithDirOptionsPanel.labelExportToDir.text")); // NOI18N

        textFieldInputDir.setText(org.openide.util.NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ComparePSTFileWithDirOptionsPanel.textFieldInputDir.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(buttonBrowseDir, org.openide.util.NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ComparePSTFileWithDirOptionsPanel.buttonBrowseDir.text")); // NOI18N
        buttonBrowseDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseDirActionPerformed(evt);
            }
        });

        labelOutputFormat.setLabelFor(comboBoxFormat);
        org.openide.awt.Mnemonics.setLocalizedText(labelOutputFormat, org.openide.util.NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ComparePSTFileWithDirOptionsPanel.labelOutputFormat.text")); // NOI18N

        comboBoxFormat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MBOX", "EML" }));

        labelEncoding.setLabelFor(comboBoxEncoding);
        org.openide.awt.Mnemonics.setLocalizedText(labelEncoding, org.openide.util.NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ComparePSTFileWithDirOptionsPanel.labelEncoding.text")); // NOI18N

        comboBoxEncoding.setModel(new CharsetComboBoxModel());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelExportToDir)
                    .addComponent(labelOutputFormat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textFieldInputDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBrowseDir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxFormat, 0, 1, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(labelEncoding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxEncoding, 0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelExportToDir)
                    .addComponent(textFieldInputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBrowseDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOutputFormat)
                    .addComponent(comboBoxFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelEncoding)
                    .addComponent(comboBoxEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBrowseDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseDirActionPerformed
        Case c = Case.getCurrentCase();
        File outputDir = new File(c.getExportDirectory());
        FileChooserBuilder fcb = new FileChooserBuilder(ComparePSTFileWithDirOptionsPanel.class)
                .setDefaultWorkingDirectory(outputDir)
                .setTitle(NbBundle.getMessage(ComparePSTFileWithDirOptionsPanel.class, "ExportPSTFileOptionsPanel.fileChooser.title")) // NOI18N
                .setDirectoriesOnly(true);
        File selectedDir = fcb.showOpenDialog();
        if (selectedDir != null) {
            textFieldInputDir.setText(selectedDir.getAbsolutePath());
        }
    }//GEN-LAST:event_buttonBrowseDirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBrowseDir;
    private javax.swing.JComboBox<String> comboBoxEncoding;
    private javax.swing.JComboBox<String> comboBoxFormat;
    private javax.swing.JLabel labelEncoding;
    private javax.swing.JLabel labelExportToDir;
    private javax.swing.JLabel labelOutputFormat;
    private javax.swing.JTextField textFieldInputDir;
    // End of variables declaration//GEN-END:variables
}
